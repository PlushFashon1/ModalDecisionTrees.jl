# scanner.jl

include("scanner.jl")
include("../src/modalDataset.jl") # this goes into DecisionTree.jl
global_logger(ConsoleLogger(stderr, DecisionTree.DTOverview))
# global_logger(ConsoleLogger(stderr, DecisionTree.DTDebug))
# global_logger(ConsoleLogger(stderr, DecisionTree.DTDetail))
X = OntologicalDataset{Int64,1}(Ontology{ModalLogic.Interval}(ModalLogic.IARelations),
	reshape(1:(100*2*10) |> collect,100,2,10))

################################################################################
################################################################################

# Generate features + operators
features_n_operators = Tuple{<:FeatureTypeFun,<:TestOperatorFun}[]

for i_attr in 1:n_attributes(X)
	# push!(features_n_operators, (ModalLogic.AttributeMinimumFeatureType(i_attr), ≥))
	# push!(features_n_operators, (ModalLogic.AttributeMinimumFeatureType(i_attr), ≤)) # "Anormal" feature
	# push!(features_n_operators, (ModalLogic.AttributeMaximumFeatureType(i_attr), ≤))
	# TODO
	push!(features_n_operators, (AttributeSoftMinimumFeatureType(i_attr, .8), ≤))
	push!(features_n_operators, (AttributeSoftMaximumFeatureType(i_attr, .8), ≤))
end

################################################################################
################################################################################

# Group feats_n_operators by polarity
(features, grouped_feats_n_aggrs, flattened_feats_n_aggrs) = prepare_feats_n_aggrs(features_n_operators)

################################################################################
################################################################################

# Compute modal dataset propositions
modalDatasetP = computeModalDataset(X, features)

relations = X.ontology.relationSet
# relations = relations[1:3]
# Compute modal dataset propositions and 1-modal decisions
modalDatasetM = computeModalDataset_m(X, relations, grouped_feats_n_aggrs, modalDatasetP, features)

Base.size(X)
Base.size(modalDatasetP)
Base.size(modalDatasetM)

Base.summarysize(X)
Base.summarysize(modalDatasetP)
Base.summarysize(modalDatasetM)
